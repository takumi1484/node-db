ServerResponse {
    domain: null,
    _events: { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    output: [],
    outputEncodings: [],
    outputCallbacks: [],
    outputSize: 0,
    writable: true,
    _last: false,
    upgrading: false,
    chunkedEncoding: true,
    shouldKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: true,
    socket: Socket {
        connecting: false,
        _hadError: false,
        _handle: TCP {
            reading: true,
            owner: [Circular],
            onread: [Function: onread],
            onconnection: null,
            writeQueueSize: 0,
            _consumed: true
            },
        _parent: null,
        _host: null,
        _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: [Object],
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            destroyed: false,
            defaultEncoding: 'utf8',
            awaitDrain: 0,
            readingMore: false,
            decoder: null,
            encoding: null
            },
        readable: true,
        domain: null,
        _events: {
            end: [Array],
            finish: [Function: onSocketFinish],
            _socketEnd: [Function: onSocketEnd],
            drain: [Array],
            timeout: [Function: socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Function: socketOnError],
            close: [Array],
            resume: [Function: onSocketResume],
            pause: [Function: onSocketPause]
            },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: WritableState {
            objectzMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 210,
            writing: false,
            corked: 1,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            bufferedRequest: [Object],
            lastBufferedRequest: [Object],
            pendingcb: 4,
            prefinished: false,
            errorEmitted: false,
            bufferedRequestCount: 4,
            corkedRequestsFree: [Object]
            },
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: Server {
            domain: null,
                _events: [Object],
                _eventsCount: 2,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [Object],
                _usingSlaves: false,
                _slaves: [],
                _unref: false,
                allowHalfOpen: true,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                keepAliveTimeout: 5000,
                _pendingResponseData: 0,
                maxHeadersCount: null,
                _connectionKey: '6::::3000',
                [Symbol(asyncId)]: 13 },
        _server:
            Server {
            domain: null,
                _events: [Object],
                _eventsCount: 2,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [Object],
                _usingSlaves: false,
                _slaves: [],
                _unref: false,
                allowHalfOpen: true,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                keepAliveTimeout: 5000,
                _pendingResponseData: 0,
                maxHeadersCount: null,
                _connectionKey: '6::::3000',
                [Symbol(asyncId)]: 13 },
        _idleTimeout: 120000,
            _idleNext:
        TimersList {
            _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: [Object],
                _unrefed: true,
                msecs: 120000,
                nextTick: false },
        _idlePrev:
            TimersList {
            _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: [Object],
                _unrefed: true,
                msecs: 120000,
                nextTick: false },
        _idleStart: 2627,
            _destroyed: false,
            parser:
        HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            '4': [Function: bound onParserExecute],
            _headers: [],
                _url: '',
                _consumed: true,
                socket: [Circular],
                incoming: [Object],
                outgoing: null,
                maxHeaderPairs: 2000,
                onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
            read: [Function],
            _consuming: true,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 20,
            [Symbol(bytesRead)]: 0,
            [Symbol(asyncId)]: 22,
            [Symbol(triggerAsyncId)]: 13 },
    connection:
        Socket {
        connecting: false,
            _hadError: false,
            _handle:
        TCP {
            reading: true,
                owner: [Circular],
                onread: [Function: onread],
            onconnection: null,
                writeQueueSize: 0,
                _consumed: true },
        _parent: null,
            _host: null,
            _readableState:
        ReadableState {
            objectMode: false,
                highWaterMark: 16384,
                buffer: [Object],
                length: 0,
                pipes: null,
                pipesCount: 0,
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                destroyed: false,
                defaultEncoding: 'utf8',
                awaitDrain: 0,
                readingMore: false,
                decoder: null,
                encoding: null },
        readable: true,
            domain: null,
            _events:
        { end: [Array],
            finish: [Function: onSocketFinish],
            _socketEnd: [Function: onSocketEnd],
            drain: [Array],
                timeout: [Function: socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Function: socketOnError],
            close: [Array],
                resume: [Function: onSocketResume],
            pause: [Function: onSocketPause] },
        _eventsCount: 10,
            _maxListeners: undefined,
            _writableState:
        WritableState {
            objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 210,
                writing: false,
                corked: 1,
                sync: true,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
            writecb: null,
                writelen: 0,
                bufferedRequest: [Object],
                lastBufferedRequest: [Object],
                pendingcb: 4,
                prefinished: false,
                errorEmitted: false,
                bufferedRequestCount: 4,
                corkedRequestsFree: [Object] },
        writable: true,
            allowHalfOpen: true,
            _bytesDispatched: 0,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server:
        Server {
            domain: null,
                _events: [Object],
                _eventsCount: 2,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [Object],
                _usingSlaves: false,
                _slaves: [],
                _unref: false,
                allowHalfOpen: true,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                keepAliveTimeout: 5000,
                _pendingResponseData: 0,
                maxHeadersCount: null,
                _connectionKey: '6::::3000',
                [Symbol(asyncId)]: 13 },
        _server:
            Server {
            domain: null,
                _events: [Object],
                _eventsCount: 2,
                _maxListeners: undefined,
                _connections: 1,
                _handle: [Object],
                _usingSlaves: false,
                _slaves: [],
                _unref: false,
                allowHalfOpen: true,
                pauseOnConnect: false,
                httpAllowHalfOpen: false,
                timeout: 120000,
                keepAliveTimeout: 5000,
                _pendingResponseData: 0,
                maxHeadersCount: null,
                _connectionKey: '6::::3000',
                [Symbol(asyncId)]: 13 },
        _idleTimeout: 120000,
            _idleNext:
        TimersList {
            _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: [Object],
                _unrefed: true,
                msecs: 120000,
                nextTick: false },
        _idlePrev:
            TimersList {
            _idleNext: [Circular],
                _idlePrev: [Circular],
                _timer: [Object],
                _unrefed: true,
                msecs: 120000,
                nextTick: false },
        _idleStart: 2627,
            _destroyed: false,
            parser:
        HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            '4': [Function: bound onParserExecute],
            _headers: [],
                _url: '',
                _consumed: true,
                socket: [Circular],
                incoming: [Object],
                outgoing: null,
                maxHeaderPairs: 2000,
                onIncoming: [Function: bound parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
            read: [Function],
            _consuming: true,
            _httpMessage: [Circular],
            [Symbol(asyncId)]: 20,
            [Symbol(bytesRead)]: 0,
            [Symbol(asyncId)]: 22,
            [Symbol(triggerAsyncId)]: 13 },
    _header: 'HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nAccess-Control-Allow-Origin: https://takumi1484.github.io\r
\nDate: Sun, 07 Apr 2019 09:39:06 GMT\r\nConnection: keep-alive\r\nTransfer-Encoding: chunked\r\n\r\n',
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
        _expect_continue: false,
        statusMessage: 'OK',
        statusCode: 200,
        [Symbol(outHeadersKey)]: null }
